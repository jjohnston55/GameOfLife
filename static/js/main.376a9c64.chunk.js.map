{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["operations","App","newGrid","rows","i","push","Array","from","useState","running","setRunning","grid","setGrid","runningRef","useRef","current","switchCell","evt","rowIdx","colIdx","state","produce","gridCopy","buttons","runSimulation","useCallback","neighbors","forEach","x","y","xIdx","yIdx","setTimeout","className","src","logo","alt","size","justify","gutter","align","type","shape","danger","onClick","Math","random","randomGrid","onContextMenu","preventDefault","map","col","onMouseDown","onMouseOver","hoverCell","style","backgroundColor","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.376a9c64.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.e94bab8c.svg\";","import { Avatar, Button, Col, Row } from 'antd';\r\nimport produce from 'immer';\r\nimport { useCallback, useRef, useState } from 'react';\r\nimport './App.css';\r\nimport 'antd/dist/antd.css';\r\nimport logo from './logo.svg';\r\n\r\nconst numRows = 30;\r\nconst numCols = 30;\r\n\r\nconst operations = [\r\n\t[-1,-1],\r\n\t[-1,0],\r\n\t[-1,1],\r\n\t[0,-1],\r\n\t[0,1],\r\n\t[1,-1],\r\n\t[1,0],\r\n\t[1,1],\r\n];\r\n\r\nconst App = () => {\r\n\tconst newGrid = () => {\r\n\t\tconst rows = [];\r\n\t\tfor (let i = 0; i < numRows; i++) {\r\n\t\t\trows.push(Array.from(Array(numCols), () => 0));\r\n\t\t}\r\n\t\treturn rows;\r\n\t}\r\n\r\n\tconst [running, setRunning] = useState(false);\r\n\tconst [grid, setGrid] = useState(() => newGrid());\r\n\r\n\tconst runningRef = useRef(running);\r\n\trunningRef.current = running;\r\n\r\n\tconst switchCell = (evt, rowIdx, colIdx, state = null) => {\r\n\t\tconst newGrid = produce(grid, gridCopy => {\r\n\t\t\tif(state != null)\r\n\t\t\t\tgridCopy[rowIdx][colIdx] = state;\r\n\t\t\telse {\r\n\t\t\t\tif (evt.buttons === 1) {\r\n\t\t\t\t\tgridCopy[rowIdx][colIdx] = 1;\r\n\t\t\t\t} else if (evt.buttons === 2) {\r\n\t\t\t\t\tgridCopy[rowIdx][colIdx] = 0;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tgridCopy[rowIdx][colIdx] = !grid[rowIdx][colIdx];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t\tsetGrid(newGrid);\r\n\t};\r\n\t\r\n\tconst hoverCell = (evt, rowIdx, colIdx) => {\r\n\t\tif (evt.buttons === 1) {\r\n\t\t\tswitchCell(evt, rowIdx, colIdx, 1);\r\n\t\t} else if (evt.buttons === 2) {\r\n\t\t\tswitchCell(evt, rowIdx, colIdx, 0);\r\n\t\t}\r\n\t}\r\n\r\n\tconst randomGrid = () => {\r\n\t\tconst rows = [];\r\n\t\tfor (let i = 0; i < numRows; i++) {\r\n\t\t\trows.push(Array.from(Array(numCols), () => {\r\n\t\t\t\tconst val = Math.random();\r\n\t\t\t\tif (val > 0.75)\r\n\t\t\t\t\treturn 1;\r\n\t\t\t\telse\r\n\t\t\t\t\treturn 0;\r\n\t\t\t}));\r\n\t\t}\r\n\t\treturn rows;\r\n\t}\r\n\r\n\tconst runSimulation = useCallback(() => {\r\n\t\tif (!runningRef.current) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tsetGrid((grid) => {\r\n\t\t\treturn produce(grid, gridCopy => {\r\n\t\t\t\tfor (let rowIdx = 0; rowIdx < numRows; rowIdx++) {\r\n\t\t\t\t\tfor (let colIdx = 0; colIdx < numCols; colIdx++) {\r\n\t\t\t\t\t\tlet neighbors = 0;\r\n\t\t\t\t\t\toperations.forEach(([x,y]) => {\r\n\t\t\t\t\t\t\tconst xIdx = rowIdx + x;\r\n\t\t\t\t\t\t\tconst yIdx = colIdx + y;\r\n\t\t\t\t\t\t\tif (xIdx >= 0 && xIdx < numRows && yIdx >= 0 && yIdx < numCols) {\r\n\t\t\t\t\t\t\t\tneighbors += grid[xIdx][yIdx];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tif (neighbors < 2 || neighbors > 3) {\r\n\t\t\t\t\t\t\tgridCopy[rowIdx][colIdx] = 0;\r\n\t\t\t\t\t\t} else if (neighbors === 3 && grid[rowIdx][colIdx] === 0) {\r\n\t\t\t\t\t\t\tgridCopy[rowIdx][colIdx] = 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t});\r\n\t\t});\r\n\t\tsetTimeout(runSimulation, 100);\r\n\t}, []);\r\n\r\n  \treturn (\r\n\t\t<div className='App'>\r\n\t\t\t<Avatar src={logo} alt='logo' size={100} />\r\n\t\t\t<h1>Conway's Game of Life</h1>\r\n\t\t\t<Row justify='center' gutter={[16,16]} align='middle'>\r\n\t\t\t\t<Col><Button type='primary' shape='round' danger={running} onClick={() => {\r\n\t\t\t\t\t\tsetRunning(!running);\r\n\t\t\t\t\t\trunningRef.current = !running;\r\n\t\t\t\t\t\trunSimulation();\r\n\t\t\t\t\t}}>{running ? 'Stop' : 'Start'}</Button></Col>\r\n\t\t\t\t<Col><Button type='primary' shape='round' onClick={() => setGrid(randomGrid())}>Random Board</Button></Col>\r\n\t\t\t\t<Col><Button type='primary' shape='round' onClick={() => {\r\n\t\t\t\t\tsetGrid(newGrid());\r\n\t\t\t\t\tsetRunning(false);\r\n\t\t\t\t\trunningRef.current = false;\r\n\t\t\t\t}}>Reset Board</Button></Col>\r\n\t\t\t\t<Col>Left Click to Draw</Col>\r\n\t\t\t\t<Col>Right Click to Erase</Col>\r\n\t\t\t</Row>\r\n\t\t\t<div onContextMenu={(evt) => evt.preventDefault()} className='grid'>\r\n\t\t\t\t{\r\n\t\t\t\t\tgrid.map((rows, rowIdx) => \r\n\t\t\t\t\t\trows.map((col, colIdx) => {\r\n\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t<div key={`${rowIdx}-${colIdx}`}\r\n\t\t\t\t\t\t\t\t\tonMouseDown={(evt) => switchCell(evt, rowIdx, colIdx)}\r\n\t\t\t\t\t\t\t\t\tonMouseOver={(evt) => hoverCell(evt, rowIdx, colIdx)}\r\n\t\t\t\t\t\t\t\t\tclassName='cell' \r\n\t\t\t\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t\t\t\tbackgroundColor: grid[rowIdx][colIdx] ? '#454545' : 'white'\r\n\t\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t)\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t\t<Row><a href='https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life' target='_blank' rel='noreferrer noopener'>Learn more about Conway's Game of Life</a></Row>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}